/* 自动生成src/index.js文件内容 */
const path = require('path')
const Components = require('../components.json')
const uppercamelcase = require('uppercamelcase')
const render = require('json-templater/string') // 在js和json对象上进行模板替换,类型vue模板,替换{{}}内的模板变量
const endLine = require('os').EOL // ?
const fs = require('fs')

const OUTPUT = path.join(__dirname, '../src/index.js')
// 定义模板
const IMPORT = 'import {{name}} from \'../src/components/{{package}}\''
const INSTALL = '  {{name}}'
const MAIN = `/* Automaticall generated by './build/build-entry.js' */

{{include}}

const components = [
{{install}}
]

const install = function (Vue, opts = {}) {
  if (install.installed) return

  components.map(component => Vue.component(component.name, component))

  Vue.prototype.$GORGEOUS = {
    size: opts.size || '',
    zIndex: opts.zIndex || 100
  }
}

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.Vue) {
  install(window.Vue)
}

export default {
  version: '{{version}}',
  install,
  ...components
}
`

const ComponentNames = Object.keys(Components)

let includeComponent = [] // import 组件
let installTemplate = [] // install模板
// let listTemplate = [] // export list模板

ComponentNames.forEach(name => {
  const componentName = uppercamelcase(name)

  includeComponent.push(render(IMPORT, {
    name: componentName,
    package: name
  }))

  installTemplate.push(render(INSTALL, {
    name: componentName,
    comonent: name
  }))

  // listTemplate.push(`  ${componentName}`)
})

const renderTemplate = render(MAIN, {
  include: includeComponent.join(endLine),
  install: installTemplate.join(`,${endLine}`),
  version: process.env.VERSION || require('../package.json').version
  // list: listTemplate.join(',', endLine)
})

fs.writeFileSync(OUTPUT, renderTemplate)
console.log('[build entry] DONE:', OUTPUT)
